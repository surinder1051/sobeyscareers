<?php
/**
 * Generate Custom Theme Sass
 *
 * @package fp-foundation
 */

if ( ! class_exists( 'FpCustomThemeSass' ) ) {
	/**
	 * This gnerates a scss file that stores the default colour options as accessible sass variables.
	 */
	class FpCustomThemeSass {


		/**
		 * The file to store the theme vars to based on blog id.
		 *
		 * @var string
		 */
		protected $output_file = '';

		/**
		 * Set the class property and start the sass var creation
		 *
		 * @see self::create_sass_variables()
		 */
		public function __construct() {
			$id                = ( get_current_blog_id() > 1 ) ? get_current_blog_id() : '';
			$this->output_file = trailingslashit( get_template_directory() ) . 'assets/scss/includes-foundation/_theme-variables' . $id . '.scss';
			if ( ! file_exists( $this->output_file ) ) {
				$this->create_sass_variables( 'options' );
			}
			add_action( 'acf/save_post', array( $this, 'create_sass_variables' ), 20 );
		}

		/**
		 * On options save, update the theme variable sass file. Since it's done on ACF options page, we use get_field, here.
		 *
		 * @param int|string $post_id is the page being edited via admin.
		 */
		public function create_sass_variables( $post_id ) {
			if ( 'options' === $post_id ) {

				$default_options = ( function_exists( 'generate_default_theme_options' ) ) ? generate_default_theme_options() : array();

				if ( isset( $default_options['main_font_colour'] ) && ! empty( $default_options['main_font_colour'] ) ) {

					$main      = $default_options['main_font_colour'];
					$secondary = $default_options['secondary_colour'];

					$heading_defaults = array();

					for ( $i = 1; $i < 7; $i++ ) {
						if ( ! empty( $default_options['headings'][ 'default_h' . $i ] ) ) {
							$heading_defaults[ 'h' . $i ] = $default_options['headings'][ 'default_h' . $i ];
						}
					}

					ob_start( 'ob_gzhandler' );
					// This file is automatically generated. Additional content will be over-written
					// Important: If you use these variables within modules the user will lose the ability to dynamically update the theme colors in production, Gulp needs to re-run to take in any new changes made to theme options.
					?>
					<?php if ( ! empty( $main ) ) : ?>

						$main-font-colour: <?php echo esc_attr( $main ); ?>;
					<?php endif; ?>

					<?php if ( ! empty( $secondary ) ) : ?>
						$secondary-colour: <?php echo esc_attr( $secondary ); ?>;
					<?php endif; ?>

					<?php foreach ( $heading_defaults as $heading_type => $head_colour ) : ?>
						$default-<?php echo esc_attr( $heading_type ); ?>-colour: <?php echo esc_attr( $head_colour ); ?>;
					<?php endforeach; ?>

					<?php if ( ! empty( $default_options['text_links']['default_colour'] ) ) : ?>
						$text-links-default-colour: <?php echo esc_attr( $default_options['text_links']['default_colour'] ); ?>;
						$text-links-hover-colour: <?php echo esc_attr( $default_options['text_links']['hover_colour'] ); ?>;
					<?php endif; ?>

					<?php if ( ! empty( $default_options['default_button']['default_colour'] ) ) : ?>
						$default-button-default-colour: <?php echo esc_attr( $default_options['default_button']['default_colour'] ); ?>;
						$default-button-hover-colour: <?php echo esc_attr( $default_options['default_button']['hover_colour'] ); ?>;
						$default-button-text-colour: <?php echo esc_attr( $default_options['default_button']['text_colour'] ); ?>;
						$default-button-text-hover-colour: <?php echo esc_attr( $default_options['default_button']['text_hover_colour'] ); ?>;
					<?php endif; ?>
					<?php
					$output = ob_get_contents();
					$output = preg_replace( '!/\*[^*]*\*+([^/][^*]*\*+)*/!', '', $output );
					$buffer = str_replace( array( "\t", '  ', '    ', '    ' ), '', $output );

					$buffer = '//this file is auto generated. Add custom vars to _branding.scss' . "\r\r" . $buffer;

					ob_end_clean();

					if ( ! is_dir( dirname( $this->output_file ) ) ) {
						mkdir( dirname( $this->output_file ) );
					}

					// Put the contents of the css file in a dist file.
					$fh = fopen( $this->output_file, 'w+' ); //phpcs:ignore
					if ( $fh ) {
						fwrite( $fh, $buffer ); //phpcs:ignore
					}
					fclose( $fh ); //phpcs:ignore
				}
			}
		}
	}
	new FpCustomThemeSass();
}
